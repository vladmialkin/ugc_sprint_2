name: Python app

on:
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f ci_cd_requirements.txt ]; then pip install -r ci_cd_requirements.txt; fi

    - name: Check if tests exist
      run: |
        if find . -name 'test_*.py' | grep .; then
          echo "tests_found=true" >> $GITHUB_ENV
        else
          echo "tests_found=false" >> $GITHUB_ENV
        fi
          

#    - name: Run Flake8 and generate HTML report
#      run: |
#        mkdir -p flake8-report-${{ matrix.python-version }}
#        flake8 --htmldir=flake8-report-${{ matrix.python-version }} .
#
#    - name: Upload Flake8 HTML report
#      if: always()
#      uses: actions/upload-artifact@v4
#      with:
#        name: flake8-html-report-${{ matrix.python-version }}
#        path: flake8-report-${{ matrix.python-version }}/
#
#    - name: Run mypy and generate txt report
#      run: |
#        mkdir -p mypy-report-${{ matrix.python-version }}
#        mypy --config-file mypy.ini . > mypy-report-${{ matrix.python-version }}/mypy-txt-report.txt
#
#    - name: Upload mypy txt report
#      if: always()
#      uses: actions/upload-artifact@v4
#      with:
#        name: mypy-txt-report-${{ matrix.python-version }}
#        path: mypy-report-${{ matrix.python-version }}

    - name: Find and install all main.txt, test.txt files
      if: env.tests_found == 'true'
      run: |
        find . -name 'main.txt' | while read req_file; do
          echo "Installing dependencies from $req_file"
          pip install --no-deps -r "$req_file"
        done
        find . -name 'test.txt' | while read req_file; do
          echo "Installing dependencies from $req_file"
          pip install -r "$req_file"
        done

    - name: Run tests
      if: env.tests_found == 'true'
      run: |
        pytest --maxfail=5 --disable-warnings

    - name: Notify if no tests found
      if: env.tests_found == 'false'
      run: |
        echo "No tests were found in the repository."

#  notify:
#    runs-on: ubuntu-latest
#    needs: build
#    if: success()
#    steps:
#      - name: Notify Telegram on success
#        run: |
#          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
#          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
#          -d text="✅ CI успешно завершeн на ветке ${{ github.ref_name }}!"